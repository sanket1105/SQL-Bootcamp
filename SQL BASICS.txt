
Databases: Collection of related information which can be stored in different ways which you liked.

DBMS: helps in managing, storing, backing up the data.
      Even helps in importing and exporting the data


4 most basic operations that DBMS must perform for us: 
C.R.U.D : Create Read Update Delete


Two types of Databases: Relational (SQL) and Non-Relational (NoSQL)

Relational Datasets are more like an Excel Spreadhseet

SQL: Organizes data into one or more tables
    Each table has rows and cols
    A unique key identifies each row

noSQL: Organize data in anything but a traditional table  
        Like: key-value stores, JSON or XML type documents, Graphs, Flexible Tables etc



#======================================================

some relational Databases (SQL):
mySQL,Oracle,postgreSQL,mariaDB

SQL is used to interact with RDBMS

-> SQL code on one RDBMS is not always portable on another RDBMS without modification

#======================================================

Some non-relational Databases (noSQL):
mongoDB,dynamoDB, apache, firebase etc

most of them will implement their own langauge for performing C.R.U.D d
atabases

#======================================================

Database Queries:
Queries are requests made to the database management system for the specific info.
-> Google search is a query

#======================================================

Primary key: unique number or key used to define each row
  
Surrogate key: a primary key that has no mapping to the real world
                EX: employee number

Natural Key: a primary key that has mapping to the real world
                EX: social security number

Foreign Key: an attribute that we can store on the database that will link us to another database table 
              It basically stores the primary key of another database table 

              Ex: employee and branch id are 2 different databases. So linking the brach databasee to employee database.
              the brach column in the employee database will be the foreign key  

Composite keys: A composite key in SQL can be defined as a combination of multiple columns, 
                and these columns are used to identify all the rows that are involved uniquely
                 

#======================================================

SQL is used to interact with the RDBMS.
Certain SQL instructions might work on one RDBMs but not on another.
#======================================================

SQL a hybrid langauge:
-> DQL : Data Query Language -> Get info that is already stored there
-> DDL : Data Defination Language -> Used for defining database schemas -> What rows cols will be there in the database
-> DCL : Data Control Language -> Used for controlling access to data
-> DML : Data Manipulation Language -> Used for inserting, updating the data

#======================================================

Query: set of instructions given to the RDBMS so as to get what info you want to retrieve

#======================================================


Primary key index number cant be repeated 
as in 2 entries cant have same index if the index is specified as the primary key

also primary key cant be null

---------------------------------------------------------

Composite Key:

A composite key is made by the combination of two or more columns in a table that
 can be used to uniquely identify each row in the table when the columns 
 are combined uniqueness of a row is guaranteed, but when it is taken
individually it does not guarantee uniqueness, or it can also be 
understood as a primary key made by the combination of two or 
more attributes to uniquely identify every row in a table. 

=============================================================================  



Most common used datatypes in mysql:

-> INT : Whole numbers
-> DECIMAL(M,N) : Decimal number exact values
                : M will be total number of digits in number,  
                : N will be number of digits after decimal point   
                 
-> VARCHAR(l) : String of text of length l
-> BLOB : binary large object : Stores large data
-> DATE : "yyyy-mm-dd"
-> TIMESTAMP : "yyyy-mm-dd hh:mm:ss"  



###############################################

Insert into and VALUES pair
Update and SET and WHERE pair
DELETE FROM and WHERE
To delete all database: DELETE FROM database_name


SELECT TOP 3 FROM database

SELECT * FROM database
LIMIT 3

----------------------------------------------------------

COUNT,AVG,SUM,MIN,MAX,DISTINCT

Sum ignores the null values

<> also ignores the NULL value

a%o : Starts with a and ends with o

The ! and ^

-----------------------------------------------------------------
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996
-> Date Format in mm-dd-yy

OR

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';
-> Date Format in yy-mm-dd
---------------------------------------------------------------------

## The following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column.
 Note: It requires double quotation marks or square brackets if the alias name contains spaces
-> if you use "" : the alias name will also contain "" 
-> if you use [] : alias will just contain the name

------------------------------------------------------------------------
The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
## using aliases

SELECT  Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

-------------------------------------------------------------------------
Join three tables using inner joins

SELECT Orders.OrderID, Customers.CustomerName,Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

-------------------------------------------------------------

The UNION operator selects only distinct values by default. 
To allow duplicate values, use UNION ALL:

to get the distinct values in the databses: use union
## to get the duplicate values also: use UNION ALL
---------------------------------------------------------

AS Type alias
-----------------
Group by vs Order By
--------------------
Having
------------------

WHERE EXISTS
---------------------------

ANY

------------------

SELECT INTO: to copy some columns from one database to another database
----------------------------------
Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. 
Just add a WHERE clause that causes the query to return no data:

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;

-------------------------------------------------------

INSERT INTO -> For copying things from one database to another

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;
--------------------------------------------------------------------------------

CASE WHEN THEN Else END

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

----------------------------------------------------------
 IFNULL(), ISNULL(), COALESCE(),

 SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products;


MOD(X,Y) = 0 IS X%Y=0 ANDZZ

-- SUbstraction in sql : SELECT COUNT(CITY) - COUNT(DISTINCT(CITY)) FROM STATION;

-- LENGTH(CITY) WILL GIVE THE LEN OF THE NAME OF THE STRING

https://www.w3schools.com/sql/func_mysql_substr.asp

LOWER() turns the entry in lower case

leFT AND RIGHT 


order by RIGHT
substring()


Datediff()

## types of triangle problem
Case 
    when  THEN

    else
end    

## PADS problem
CONCAT

Row_Number

CAST ___ AS NUMERIC(36,4) : WILL GIVE THE ___ JUST TO GET 4 PLACES AFTER DECIMAL too

ROUND(X,4) WILL NOT GUARATEE YOU WILL ONLY GET 4 PLACES AFTER DECIMAL, BUT WILL ROUND THE 4 DECIMAL DIGITS

SQRT
POWER(X,2)


WIth data AS

Having


Identity column

row_number() : use to create a unique number for the column
row_number over (order by column_name) as XXX -> XXX is the new column name

row_number over (partition by column_name order by column_name) as XXX 

rank() over (order by XX) as yy
dense_rank() over (order by XX) as yy


SELECT round(AVG(POPULATION),0) FROM CITY
OR 
SELECT round(AVG(POPULATION),-1) FROM CITY

## -1 is the first digit left to the decimal, -2 second digit left to sql and so on
## 1 is the first digit right to decimal
## so will round according to the digit placement


->BOTH WORKS
-> ROUNF TO NEAREST INTEGER

SELECT CEILING(AVG(SALARY)) - CEILING(AVG(CAST(REPLACE(CAST(Salary AS VARCHAR(10)),"0","") AS INT))) + 1 FROM EMPLOYEES

## mysql : select ceil(avg(salary) - avg(replace(salary,'0',''))) from employees


## Left right functions
left(city,1)

substr(name, start,end) ## for characters from start
substr(name,-1) ## last character in the name


select distinct city from station
where city REGEXP "^[aeiou].*[aeiou]$"

select distinct city from station
where city REGEXP "^[^aeiou]"

select distinct city from station
where city REGEXP "[^aeiou]$"


## | is for either or
select distinct city from station
where city REGEXP "^[^aeiou]|[^aeiou]$"


## types of traingles

/*
Enter your query here.
*/

select case
    when a+b>c and b+c>a and a+c>b then
        case
            when a=b and b=c then "Equilateral"
            when a=b or b=c or a=c then "Isosceles"
            else "Scalene"
        end
    else "Not A Triangle"
    end
from triangles


## sqrt() , power(x,n)

## median of the database

## instead of using case when then end in sql, use if case : if(g.grade<8, NULL, s.name)
## if grade < 8, then null else name

## https://www.hackerrank.com/challenges/full-score/problem?isFullScreen=false
## personal best queston


## https://medium.com/jen-li-chen-in-data-science/hackerrank-3b61f00439b4
## https://www.hackerrank.com/challenges/harry-potter-and-wands/problem?isFullScreen=true


## hard question
https://www.hackerrank.com/challenges/challenges/problem?isFullScreen=true
https://www.hackerrank.com/challenges/challenges/problem



## to get the month from the date
extract(month from submit_date)

date_part('days',max(post_date) - min(post_date))
date_part('month',sent_date)

count(*) will count the number of rows in the table

sum(case 
when lower(payment_method) = 'apple pay' then transaction_amount else 0
end)


SELECT app_id , 
round(
100.0 * sum(case when event_type='click' then 1 else 0 end) /
sum(case when event_type='impression' then 1 else 0 end),2) from events
where date_part('year',timestamp)=2022
group by app_id


## second day confirmation question: @datalemur
## https://datalemur.com/questions/second-day-confirmation
WITH cte AS (
SELECT 
  *,
  RANK() OVER(PARTITION BY user_id ORDER BY action_date ASC) AS rn
FROM 
  emails e JOIN texts t
  ON e.email_id = t.email_id
ORDER BY
  action_date
)
SELECT
  user_id
FROM
  cte
WHERE
  rn = 2 AND signup_action = 'Confirmed


## https://datalemur.com/questions/compensation-outliers
with data as (
SELECT employee_id, salary, title,
(avg(salary) over(partition by title))*2 as overpaid,
(avg(salary) over(partition by title))/2 as underpaid
FROM employee_pay)

select employee_id,salary,
case when salary > overpaid then 'Overpaid'
      when salary < underpaid then 'Underpaid'
      end as status
from data
where salary>overpaid or salary < underpaid

## in this if you write "Overpaid" or anything in double quotation marks ""
## it will be think that text inside the "" is the column name



 
## 3 day moving average
## https://datalemur.com/questions/rolling-average-tweets
select user_id, tweet_date, ROUND(avg(number) over(partition by user_id order by tweet_date
rows BETWEEN 2 preceding and current row),2) as rolling_avg_3days


## when you just want the date : cast(measurement_time as date)
## remiander : i%2


## for getting the combinations which dont repeat like a,b same as b,a:
SELECT a.country as country1, b.country as country2
FROM country a
JOIN country b
ON a.country>b.country


## for getting the combinations even if they repeat, no issues in thats
-> use cross join
FROM country a
cross JOIN country b


## https://datalemur.com/questions/frequently-purchased-pairs

## row_number that we get from rank() and some condition on the same row_number 
cannnot exist in a single Query
## so for that write a subquery assigning the row number to it
and use that subquery to write some condition on the row_number



## if multilple joins in single query : then use group by at the last
## and some condition you need to apply, then use group by and then only condition



## first_value() function: https://datalemur.com/questions/fill-missing-product
## this is used to fill the null values


## to add days in the date
dateadd() method


## ce.end_date - ce.start_date
## will give the number of days between the dates 


####################################################
SELECT 
Round((100.0 * sum(case when lower(event_type) like 'webinar' then 1 else 0 end) / 
count(*)))
FROM marketing_touches
where date_part('month',event_date) = 04


#####################################
https://datalemur.com/questions/uniquely-staffed-consultants


## https://datalemur.com/questions/sql-repeat-purchases


## Cummulative Sum`
SELECT order_date, product_type, 
SUM(quantity) OVER (PARTITION BY product_type ORDER BY order_date
rows between unbounded preceding and current row) AS cum_purchased
FROM total_trans
ORDER BY order_date;


########################################################
SELECT u.city, count(t.order_id) FROM trades t
join users u
on u.user_id = t.user_id and status = 'Completed'

## so when you wanna join and with some condition using and clause in the join statement
rather than using join and then having clause

###############################################################
## https://datalemur.com/questions/money-transfer-relationships


# Round((sum(revenue)/sum(spend))::decimal ,2)
or 
## cast(sum(revenue)/sum(spend) as decimal(16,2))



##############################################
https://datalemur.com/questions/rolling-average-tweets


## if you have tabel with entries a and b
## you wanna also see if b,a is also there in the same table
## so just use the intersect option from the table to see whether b,a is also there or not
-> with data1 as 
(select payer_id, recipient_id from payments p
intersect
select recipient_id, payer_id from payments )

select count(*)/2 from data1

#################################################################################
first_value(): to get the first value in each category

################################################
left(string,6)
right(string,6)

#################################################
lag() in sql


############################################################################

# for mean, median and mode

round(avg(email_count),0) as mean,
PERCENTILE_CONT(0.5) within group (order by email_count) as median,
mode() within group (order by email_count) as mode

#############################################################################
https://datalemur.com/questions/frequently-purchased-pairs


# starting with vowel:
select distinct city from station
where lower(city) regexp '^[aeiou]'
############################################################################################################

## ending with vowel
select distinct city from station
where lower(city) regexp '[aeiou]$'

OR

SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u';

###############################################################
## start and edn as vowel
select distinct city from station
where lower(city) regexp '^[aeiou].*[aeiou]$'

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(LEFT(CITY, 1)) IN ('a', 'e', 'i', 'o', 'u')
      AND LOWER(RIGHT(CITY, 1)) IN ('a', 'e', 'i', 'o', 'u');


###############################################################
no start and end with vowel
SELECT DISTINCT CITY
FROM STATION
WHERE lower(CITY)  REGEXP '^[^aeiou].*[^aeiou]$';




######################################################################
my sql
select case 
        when a+b>c and a+c>b and b+c>a then
            case 
                when a=b and b=c then 'Equilateral'
                when a=b or b=c or a=c then 'Isosceles'
                else 'Scalene'
            end
        else 'Not A Triangle'
    end as one
from Triangles;