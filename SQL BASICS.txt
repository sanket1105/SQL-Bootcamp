
Databases: Collection of related information which can be stored in different ways which you liked.

DBMS: helps in managing, storing, backing up the data.
      Even helps in importing and exporting the data


4 most basic operations that DBMS must perform for us: 
C.R.U.D : Create Read Update Delete


Two types of Databases: Relational (SQL) and Non-Relational (NoSQL)

Relational Datasets are more like an Excel Spreadhseet

SQL: Organizes data into one or more tables
    Each table has rows and cols
    A unique key identifies each row

noSQL: Organize data in anything but a traditional table  
        Like: key-value stores, JSON or XML type documents, Graphs, Flexible Tables etc



#======================================================

some relational Databases (SQL):
mySQL,Oracle,postgreSQL,mariaDB

SQL is used to interact with RDBMS

-> SQL code on one RDBMS is not always portable on another RDBMS without modification

#======================================================

Some non-relational Databases (noSQL):
mongoDB,dynamoDB, apache, firebase etc

most of them will implement their own langauge for performing C.R.U.D d
atabases

#======================================================

Database Queries:
Queries are requests made to the database management system for the specific info.
-> Google search is a query

#======================================================

Primary key: unique number or key used to define each row

Surrogate key: a primary key that has no mapping to the real world
                EX: employee number

Natural Key: a primary key that has mapping to the real world
                EX: social security number

Foreign Key: an attribute that we can store on the database that will link us to another database table 
              It basically stores the primary key of another database table 

              Ex: employee and branch id are 2 different databases. So linking the brach databasee to employee database.
              the brach column in the employee database will be the foreign key  

Composite keys: A composite key in SQL can be defined as a combination of multiple columns, 
                and these columns are used to identify all the rows that are involved uniquely
                 

#======================================================

SQL is used to interact with the RDBMS.
Certain SQL instructions might work on one RDBMs but not on another.
#======================================================

SQL a hybrid langauge:
-> DQL : Data Query Language -> Get info that is already stored there
-> DDL : Data Defination Language -> Used for defining database schemas -> What rows cols will be there in the database
-> DCL : Data Control Language -> Used for controlling access to data
-> DML : Data Manipulation Language -> Used for inserting, updating the data

#======================================================

Query: set of instructions gievn to the RDBMS so as to get what info you want to retrieve

#======================================================


Primary key index number cant be repeated 
as in 2 entries cant have same index if the index is specified as the primary key

also primary key cant be null

---------------------------------------------------------

Composite Key:

A composite key is made by the combination of two or more columns in a table that
 can be used to uniquely identify each row in the table when the columns 
 are combined uniqueness of a row is guaranteed, but when it is taken
individually it does not guarantee uniqueness, or it can also be 
understood as a primary key made by the combination of two or 
more attributes to uniquely identify every row in a table. 

=============================================================================  



Most common used datatypes in mysql:

-> INT : Whole numbers
-> DECIMAL(M,N) : Decimal number exact values
                : M will be total number of digits in number,  
                : N will be number of digits after decimal point   
                 
-> VARCHAR(l) : String of text of length l
-> BLOB : binary large object : Stores large data
-> DATE : "yyyy-mm-dd"
-> TIMESTAMP : "yyyy-mm-dd hh:mm:ss"  



###############################################

Insert into and VALUES pair
Update and SET and WHERE pair
DELETE FROM and WHERE
To delete all database: DELETE FROM database_name


SELECT TOP 3 FROM database

SELECT * FROM database
LIMIT 3

----------------------------------------------------------

COUNT, AVG, SUM,MIN,MAX, DISTINCT

Sum ignores the null values

<> also ignores the NULL value

a%o : Starts with a and ends with o

The ! and ^

-----------------------------------------------------------------
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996
-> Date Format in mm-dd-yy

OR

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';
-> Date Format in yy-mm-dd
---------------------------------------------------------------------

## The following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column.
 Note: It requires double quotation marks or square brackets if the alias name contains spaces
-> if you use "" : the alias name will also contain "" 
-> if you use [] : alias will just contain the name

------------------------------------------------------------------------
The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
## using aliases

SELECT  Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

-------------------------------------------------------------------------
Join three tables using inner joins

SELECT Orders.OrderID, Customers.CustomerName,Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

-------------------------------------------------------------

The UNION operator selects only distinct values by default. 
To allow duplicate values, use UNION ALL:

to get the distinct values in the databses: use union
## to get the duplicate values also: use UNION ALL
---------------------------------------------------------

AS Type alias
-----------------
Group by vs Order By
--------------------
Having
------------------

WHERE EXISTS
---------------------------

ANY

------------------

SELECT INTO: to copy some columns from one database to another database
----------------------------------
Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. 
Just add a WHERE clause that causes the query to return no data:

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;

-------------------------------------------------------

INSERT INTO -> For copying things from one database to another

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;
--------------------------------------------------------------------------------

CASE WHEN THEN END

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

----------------------------------------------------------
 IFNULL(), ISNULL(), COALESCE(),

 SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products;


MOD(X,Y) = 0 IS X%Y=0 ANDZZ

-- SUbstraction in sql : SELECT COUNT(CITY) - COUNT(DISTINCT(CITY)) FROM STATION;

-- LENGTH(CITY) WILL GIVE THE LEN OF THE NAME OF THE STRING

https://www.w3schools.com/sql/func_mysql_substr.asp

LOWER() turns the entry in lower case

leFT AND RIGHT 